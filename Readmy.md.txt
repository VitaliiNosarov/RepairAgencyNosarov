RepairAgency
Repair agency project

Technology:

Maven;
MySQL;
Tomcat;
Log4J;
JSP + JSTL;
Servlets;
Apache POI;
JDBC;
JUnit;
Mockito;
Bootstrap
Css;
JavaScript;

Database schema link https://ibb.co/R4f2Zpd

Requirements:
JDK 1.8+;
Tomcat 9+;
MySQL 5.6+

How to run the project:

1: Clone project from Git repository (shorturl.at/suDI7)
2: Install MySQL;
3: Create new Database with RepairAgency script in directory src/main/java/ua/kharkiv/nosarev/sql
4: Install and run Tomcat Server
5: Put RepairAgency.war to directory apache-tomcat-VERSION\webapps
6: Open in browser link http://localhost:8080/RepairAgency/

Admin:
email: vitalii@gmail.com
password: Admin1

----------------------------------------------------------------------------------------------------------------------------------
Ремонтное агенство

Существуют роли: менеджер, мастер, пользователь.
Зарегистрированный пользователь может создавать заявку на ремонт. Также у пользователя есть счет, с которого осуществляется оплата за ремонт.
Менеджер имеет возможность управлять заявками пользователя:
- назначить мастера;
- определить стоимость работ;
- изменить статус заявки: "ожидает оплаты", "оплачено", "отменено".
Менеджер также имеет возможность пополнить пользователю счет.
Мастер имеет возможность вибрать со списка заявку на ремонт и сменить ее статус на "в работе" або "выполнено". После того, как заявка была выполнена, пользователь имеет возможность оставить отзыв о работе мастера.
Менеджер должен иметь возможность просмотреть отчет со списком заявок, где он может провести сортировку:
- по дате заявки;
- статусу заявки;
- по стоимости.
Также менеджер должен иметь возможность фильтровать заказы:
- по статусу;
- по мастеру, который выполняет/выполнял заказ.
--------------------------------------------------------------------------------------------------------------------------------------------
Требования:
- [X] На основании сущностей предметной области создать классы их описывающие.
- [X] Классы и методы должны иметь названия, которые отражают их функциональность и должны быть грамотно разнесены по пакетам.
- [X] Оформление кода должно соответствовать Java Code Convention.
- [X] Информацию о предметной области хранить в БД (рекомендуется MySQL или PostgreSQL), для доступа использовать JDBC с помощью пула соединений (готового или разработанного самостоятельно).
- [X] Приложение должно поддерживать работу с кириллицей, в том числе и при хранении информации в БД.
- [X] должна быть возможность переключения языка интерфейса.
- [X] должна быть поддержка введения и сохранения информации в базе данных на разных языках.
- [X] в качестве языков выбрать минимум две: одна на основе кирилицы, вторая на основе латиницы.
- [X] Архитектура приложения должна соответствовать шаблону Model-View-Controller.
- [X] При реализации алгоритмов бизнес-логики использовать шаблоны GoF (Factory Method, Command, Singleton, Builder, Strategy и другие).
- [X] Используя сервлеты и JSP, реализовать функциональности, предложенные в постановке конкретной задачи.
- [X] Использовать Apache Tomcat в качестве контейнера сервлетов.
- [X] При разработке JSP использовать теги из библиотеки JSTL и собственные теги(минимум: один тег custom tag library и один тег tag file).
- [X] Реализовать защиту от повторной отправки данных на сервер при обновлении страницы (реализовать PRG).
- [X] При разработке бизнес логики использовать сессии.
- [X] При разработке бизнес логики использовать фильтры.
- [X] При разработке бизнес логики использовать слушатели.
- [X] В приложении должны быть реализованы аутентификация и авторизция, разделение прав доступа пользователей системы к компонентам программы. Шифрование паролей приветствуется.
- [X] При разработке использовать журналирование событий (Log4j).
- [X] Код должен содержать комментарии хотя бы частично.
- [X] Приложение должно быть покрыто модульными тестами(минимальный процент покрытия 40%).
- [X] Реализовать механизм пагинации.
- [X] Все поля ввода должны быть с валидацией данных.
- [X] Приложение должно корректно реагировать на ошибки и исключения (конечный пользователь не должен видеть stack trace).
- [X] Самостоятельное расширение функционала поощряется.
- [X] Использование HTML, CSS, JS фрецмворков для интерфейса пользователя поощряется (Bootstrap, Materialize и т.д.).